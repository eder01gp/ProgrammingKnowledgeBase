Variables: let y const - pueden ser "block" scope. var no puede ser.
Block scope: es cuando va entre brackets {  (pero no es una función).

FUNCIONES:
hello = function() {  return "Hello World!"; }
hello = () =>      {  return "Hello World!"; }
hello = () => "Hello World!";
hello = (val) => "Hello " + val;
hello = val => "Hello " + val;

console.log("Sum = " + sum); // console
document.write(x); // website
prompt(); // pedir info en pantalla
typeof(); // tipo de variable
x.toString(); // convertir a string
Number(x); // convertir en numero
parseInt(x) // convertir en numero int
isNaN(x); // para saber si un valor is Not A Number
Math.random(); // random float
Math.pow(x,y); // x elevado a la y
Math.sqrt(x); // raiz cuadrada de x
% // resto de división entre enteros
!(x < 5 && x < 10) // da la vuelta al resultado
string.toLowerCase(); // pasar a minusculas
string.includes(); // 
string.length(); //
string.split(" "); // devuelve array de elementos que estan separados por " ".



OBJETOS:
// Para crear una propiedad nueva, simplemente asignarla un valor:
    if (car ["model"] == undefined) car ["model"] = "Volvo";

// Para sacar valores:

    person.name
    person["name"]
    
    console.log(family.members[0].name); // Ejemplo abajo
    console.log(family["members"][0]["name"]); // Ejemplo abajo
    
// Para borrar propiedades:
    delete person.name;

var person = {
    name: "John",                    //String
    lastname: "Doe",
    age: 35,                         //Number
    gender: "male",
    lucky_numbers: [ 7, 11, 13, 17], //Array
    significant_other: person2       //Object, yes the same variable/object defined after
};

var family = {
    lastname: "Doe",
    members: [person, person2]       //Array de objetos
};


FOR:
for (let i=mySampleArray.length; i>-1; i--)
{
    console.log(mySampleArray[i]);
}


 FOR IN |funciona con objetos, arrays y strings

 var dog = {
  species: "Great Dane",
  size: "Extra Large",
  age: 3 ,
  name: "Rocky"
}

for(items in dog){
  console.log(dog[items]);
}

//Otro ejemplo:
var myArray = [3423,5,4,47889,654,8,867543,23,48,56432,55,23,25,12];
    for (var index in myArray) {
    console.log(myArray[index]);
}
//this prints the value of the item in the position index

// SWITCH CASEE
switch (new Date().getDay()) {
  case 4:
  case 5:
    text = "Soon it is Weekend";
    break;
  case 0:
  case 6:
    text = "It is Weekend";
    break;
  default:
    text = "Looking forward to the Weekend";
}

INLINE CONDITIONS:
https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator

ARRAYS
var Newarr = []; / crearla
array.lenght / variable que sabe la longitud del array

// Para duplicar array
arr2 = [...arr1];

// Para meter nuevos valores al final de la lista: PUSH
    var myArray = ['Pedro','Juan','Maria'];
    myArray.push('Chris');
    console.log(myArray); //this will print ['Pedro','Juan','Maria','Chris'];
    
// Para quitar el último valor: POP
    var myArray = ['Pedro','Chris','Juan','Maria'];
    myArray.pop();
    console.log(myArray); //this will print ['Pedro','Chris','Juan'];
    
// Para meter nuevos valores al principio de la lista. UNSHIFT
    var myArray = ['Juan','Maria'];
    myArray.unshift('Pedro');
    myArray.unshift('Chris','Bob');
    console.log(myArray); //this will print ['Chris','Bob','Pedro','Juan','Maria']; 

// Para quitar valores del principio de la lista. SHIFT 
    var myArray = ['Chris','Bob','Pedro','Juan','Maria'];
    myArray.shift();
    console.log(myArray); //this will print ['Bob','Pedro','Juan','Maria'];


// Prestame un cacho de array. DEJA 2 y dame hasta el 4. (No se afecta el array). SLICE
    var x = [14, 3,3245,234,52,345,3,45,23, 77];
    console.log(x.slice(2, 4));

// Dame un cacho de array. DEJA 2 y dame 4 elementos. (Se acorta el array). SPLICE
    var y = [14, 3,3245,234,52,345,3,45,23, 77];
    console.log(y.splice(2, 4));
    console.log(y);
    
// Dame un cacho de array e inserta elementos ahí: SPLICE
    var y = [14, 3, 3245, 234, 52, 345, 3, 45, 23, 77];
    y.splice(2,4,'a');  //returns [3245, 234, 52, 345] 
    console.log(y); // [14, 3, 'a', 3, 45, 23, 77]

// No me des nada e inserta elementos ahí: SPLICE
    var y = [14, 3, 3245, 234, 52, 345, 3, 45, 23, 77];
    y.splice(2,0,'a');  //returns [] 
    console.log(y); // [14, 3, 'a', 3245, 234, 52, 345, 3, 45, 23, 77]
    
// Para concatenar dos arrays. CONCAT
    arr1.concat(arr2);
    
//  array.sort(); ordenar de A-Z
    array.reverse(); ordenar de Z-A
    
// Para convertir de array a string. JOIN
    array.join(" "); // hace un string con el separador indicado entre paréntesis
    
    HIGHER-ORDER FUNCTION 
// Sin valores prestablecidos en la función que creemos:
    
// (La función que va dentro ya tiene unos parametros prestablecidos.)
array.forEach(function(currentValue, index, arr)    {   } ); // Loopear array
array.forEach(        (currentValue, index, arr) => {   } ); // Loopear array, shorter way

array.filter(function(currentValue, index, arr)     { return currentValue>index; } );  // Deja los valores que cumplan la condicion que pongamos en el return de la función.
array.filter(         (currentValue, index, arr) => { return currentValue>index; } ); // ejemplo. recuerda: las condiciones se ponen en el return.
array.filter(         (currentValue, index, arr) => currentValue>index            ); // Si no ponemos corchetes (ni ";"), ya entiende que es el return.

array.map(function(currentValue, index, arr){}); // pasa todos los valores del array por la función establecida    

array.sort(function(a, b){return a – b}); // Ordenar numeros. (Metemos dentro de sort una función que dependiendo de si el resultado es < o > 0 va ordenadondo los elementos por pares): 
    var points = [40, 100, 1, 5, 25, 10];
    points.sort(function(a, b){return a – b});
    console.log(points); //[ 1, 5, 10, 25, 40, 100 ]

    
    LOOPEAR ARRAYS CON FOR:
for (var index in myArray){
    console.log(myArray[index]);
}




